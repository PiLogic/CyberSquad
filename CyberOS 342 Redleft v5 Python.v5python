{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT21, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT9)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nBELT = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nLoader = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nMogo = DigitalOut(brain.three_wire_port.a)\ncontroller_1 = Controller(PRIMARY)\nColour = Optical(Ports.PORT8)\nArm = DigitalOut(brain.three_wire_port.b)\nWallstake_motor_a = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nWallstake_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nWallstake = MotorGroup(Wallstake_motor_a, Wallstake_motor_b)\nholder = DigitalOut(brain.three_wire_port.c)\ndistance_11 = Distance(Ports.PORT11)\nTipper = DigitalOut(brain.three_wire_port.d)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\nremote_control_code_enabled = True\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nwast = 0\nholderExtended = False\narmExtended = False\ntipperExtended = False\n\ndef when_started1():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Mogo.set(False)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    BELT.set_velocity(100, PERCENT)\n    Loader.set_velocity(100, PERCENT)\n    BELT.set_max_torque(100, PERCENT)\n    Loader.set_max_torque(100, PERCENT)\n    Colour.gesture_disable()\n    Wallstake.set_velocity(20, PERCENT)\n    Wallstake.set_max_torque(100, PERCENT)\n    Wallstake.set_position(0, DEGREES)\n    holder.set(False)\n    Wallstake.set_stopping(BRAKE)\n\ndef onevent_controller_1buttonL1_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    BELT.spin(FORWARD)\n    Loader.spin(FORWARD)\n\ndef onevent_controller_1buttonR1_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Mogo.set(True)\n\ndef onevent_controller_1buttonR2_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Mogo.set(False)\n\ndef onevent_controller_1buttonL2_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    BELT.spin(REVERSE)\n    Loader.spin(REVERSE)\n\ndef onevent_controller_1buttonX_pressed_0():\n    global armExtended, wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if armExtended == True: \n        Arm.set(False)\n        armExtended = False\n    else:\n        Arm.set(True)\n        armExtended = True\n    \n\ndef onevent_controller_1buttonB_pressed_0():\n    global holderExtended, wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if holderExtended: \n        holder.set(False)\n    else:\n        holder.set(True)\n    holderExtended = not(holderExtended)\n    \ndef stopBelt():\n    BELT.stop()\n    \ndef onevent_controller_1buttonA_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    stopBelt()\n    wallstakeTo(170)\n    wallstakeTo(100) \n\n\ndef onevent_controller_1buttonY_pressed_0():\n    global tipperExtended, wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if tipperExtended: \n        Tipper.set(False)\n    else:\n        Tipper.set(True)\n    tipperExtended = not(tipperExtended)\n\ndef onevent_controller_1buttonDown_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    controller_1.rumble(\"....\")\n    wast = 0\n    Wallstake.spin_to_position(1, DEGREES)\n    BELT.set_velocity(100, PERCENT)\n    wait(0.3, SECONDS)\n    Wallstake.spin_to_position(0, DEGREES)\n    wait(0.4, SECONDS)\n    holder.set(True)\n    BELT.spin(FORWARD)\n    Loader.spin(FORWARD)\n\ndef onevent_controller_1buttonL2_released_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    BELT.stop()\n    Loader.stop()\n\ndef onevent_controller_1buttonUp_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    controller_1.rumble(\"-.-.\")\n    Wallstake.spin_to_position(0, DEGREES)\n    Wallstake.spin_to_position(0, DEGREES)\n    wait(0.4, SECONDS)\n    holder.set(True)\n    wast = 1\n    BELT.set_velocity(50, PERCENT)\n\ndef when_started2():#new\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Colour.set_light(LedStateType.ON)\n    #while True and competition.is_autonomous():\n    while True:\n        if Colour.color() == Color.BLUE:\n            wast = 0\n            BELT.set_velocity(100,PERCENT)\n            brain.screen.set_fill_color(Color.CYAN)\n            wait(0.25, SECONDS)\n            while distance_11.object_distance(MM) >= 50:\n                wait(5, MSEC)\n            BELT.spin_for(FORWARD, 151,DEGREES)\n            BELT.spin_for(REVERSE,100,DEGREES)\n            BELT.spin(FORWARD)\n            brain.screen.set_fill_color(Color.TRANSPARENT)\n    Colour.set_light(LedStateType.OFF)\n\ndef onevent_Colour_detects_object_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if wast == 1:\n        Wallstake.set_stopping(HOLD)\n        Wallstake.spin_to_position(10, DEGREES)\n        while not distance_11.object_distance(MM) < 50:\n            wait(5, MSEC)\n        BELT.set_position(0, DEGREES)\n        BELT.spin_to_position(145, DEGREES)\n        wait(0.5, SECONDS)\n        BELT.spin_to_position(147, DEGREES)\n        wast = 0\n        holder.set(False)\n        wait(0.5, SECONDS)\n        BELT.spin_for(REVERSE, 45, DEGREES)\n        wait(0.4, SECONDS)\n        BELT.set_velocity(100, PERCENT)\n        Loader.stop()\n\ndef onevent_controller_1buttonLeft_released_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Wallstake.stop()\n\ndef onevent_controller_1buttonRight_released_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Wallstake.spin(REVERSE)\n\ndef onevent_controller_1buttonRight_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Wallstake.spin(REVERSE)\n    holder.set(False)\n\ndef when_started3():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    while True:\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(distance_11.object_distance(MM), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        wait(0.1, SECONDS)\n        brain.screen.clear_screen()\n        wait(5, MSEC)\n\ndef onevent_controller_1buttonLeft_pressed_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Wallstake.spin(FORWARD)\n\ndef when_started4():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    while True:\n        if Wallstake.position(DEGREES) >= 175:\n            Wallstake.stop()\n            Wallstake.spin_to_position(175, DEGREES)\n        wait(5, MSEC)\n\ndef wallstakeTo(val):\n    Wallstake.spin_to_position(val,DEGREES)\n\ndef setSpeed(val):\n    drivetrain.set_drive_velocity(val, PERCENT)\n    drivetrain.set_turn_velocity(val, PERCENT)\n\ndef onauton_autonomous_0():\n    global holder, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    \n    drivetrain.set_heading(90, DEGREES)\n    remote_control_code_enabled = False\n    #red left\n\n    setSpeed(30)\n    Loader.spin(REVERSE)\n    forward(405)\n    turnTo(180)\n    forward(100)\n    wallstakeTo(165)\n    holder.set(True)\n    backward(100)\n    holder.set(False)\n    wallstakeTo(180)\n    backward(20)\n    forward(20)\n    wallstakeTo(0)\n    holder.set(True)\n    setSpeed(70)\n    backward(250)\n    turnTo(138)\n    backward(700)\n    backward(300)\n    wait(0.1,SECONDS)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    backward(215)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    Mogo.set(True)\n    turnTo(272)\n    intake()\n    forward(700)\n    \n\n\n\n    # holder.set(True)\n    # backward(150)\n    # drivetrain.set_drive_velocity(80, PERCENT)\n    # backward(710)\n    # clamp()\n    # pause(0.5)\n    # intake()\n    # pause(0.5)\n    # backward(270)\n    # intakeReverse()\n    # turnTo(270)\n    # forward(450)\n    # turnTo(340)\n    # forward(215)\n    # intakeReverse()\n    # backward(100)\n    # turnTo(95)\n    # forward(1000)\n    \n\n\n\ndef ondriver_drivercontrol_0():\n    global wast, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    remote_control_code_enabled = True\n    holder.set(True)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    drivetrain.set_turn_velocity(100,PERCENT)\n\ndef forward(dist):\n    drivetrain.drive_for(FORWARD,dist,MM)\n\ndef backward(dist):\n    drivetrain.drive_for(REVERSE,dist,MM)\n\ndef intake():\n    BELT.spin(FORWARD)\n    Loader.spin(FORWARD)\n\ndef intakeReverse():\n    BELT.spin(REVERSE)\n    pause(0.5)\n    BELT.spin(FORWARD)\n\ndef clamp():\n    Mogo.set(True)\n\ndef unclamp():\n    Mogo.set(False)\n\ndef pause(sec):\n    wait(sec,SECONDS)\n\ndef turnTo(ang):\n    drivetrain.turn_to_heading(ang, DEGREES)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# system event handlers\ncontroller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\ncontroller_1.buttonL2.pressed(onevent_controller_1buttonL2_pressed_0)\ncontroller_1.buttonX.pressed(onevent_controller_1buttonX_pressed_0)\ncontroller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\ncontroller_1.buttonL2.released(onevent_controller_1buttonL2_released_0)\ncontroller_1.buttonA.pressed(onevent_controller_1buttonA_pressed_0)\ncontroller_1.buttonY.pressed(onevent_controller_1buttonY_pressed_0)\ncontroller_1.buttonB.pressed(onevent_controller_1buttonB_pressed_0)\ncontroller_1.buttonUp.pressed(onevent_controller_1buttonUp_pressed_0)\nColour.object_detected(onevent_Colour_detects_object_0)\ncontroller_1.buttonLeft.released(onevent_controller_1buttonLeft_released_0)\ncontroller_1.buttonRight.released(onevent_controller_1buttonRight_released_0)\ncontroller_1.buttonRight.pressed(onevent_controller_1buttonRight_pressed_0)\ncontroller_1.buttonLeft.pressed(onevent_controller_1buttonLeft_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nws2 = Thread( when_started2 )\nws3 = Thread( when_started3 )\nws4 = Thread( when_started4 )\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[21,4,2,3,9],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"BELT","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"Loader","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"Mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"Colour","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"Arm","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[18,19],"name":"Wallstake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"UP","rev":"Down","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"holder","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[11],"name":"distance_11","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"Tipper","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}