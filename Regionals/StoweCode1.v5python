{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT10)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 250, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nIntake_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, True)\nIntake_motor_b = Motor(Ports.PORT21, GearSetting.RATIO_6_1, False)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nXwheel = Encoder(brain.three_wire_port.a)\nZwheel = Encoder(brain.three_wire_port.g)\nBelt_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nBelt_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nBelt = MotorGroup(Belt_motor_a, Belt_motor_b)\nMogoMech = DigitalOut(brain.three_wire_port.f)\nArm = DigitalOut(brain.three_wire_port.d)\nStarter = DigitalOut(brain.three_wire_port.c)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\nremote_control_code_enabled = True\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\nBeltspinny = 0\nreverseintake = Event()\nnostuckcodepls = Event()\nstuckcodepls = Event()\nmessage1 = Event()\nnotused = Event()\n\n# Functions used to shorten commands\n\ndef forward(dist):\n    drivetrain.drive_for(FORWARD, dist, MM)\n\ndef backward(dist):\n    drivetrain.drive_for(REVERSE, dist, MM)\n\ndef turnTo(ang):\n    for _ in range(2):\n        drivetrain.turn_to_heading(ang, DEGREES)\n\ndef fullTurn():\n    drivetrain.turn_for(RIGHT, 360, DEGREES)\n\ndef pause(sec):\n    wait(sec, SECONDS)\n\n# Startup Procedure\n\ndef when_started1():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # Drive settings\n\n    # Constants\n    TurnSpeed = 90\n    DriveSpeed = 100\n    IntakeSpeed = 70\n    BeltSpeed = 90\n\n    drivetrain.set_turn_velocity(TurnSpeed, PERCENT)\n    drivetrain.set_drive_velocity(DriveSpeed, PERCENT)\n    Intake.set_velocity(IntakeSpeed, PERCENT)\n    Intake.set_max_torque(100, PERCENT)\n    Belt.set_velocity(BeltSpeed, PERCENT)\n    Belt.set_max_torque(100, PERCENT)\n    calibrate_drivetrain()\n    # Text on brain\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"A Jaiden Joshi production\")\n    brain.screen.set_cursor(2, 1)\n    brain.screen.print(\"Built by Ayaan and Oscar, designed by Max\")\n    brain.screen.set_cursor(3, 1)\n    brain.screen.print(\"TVEX-6\")\n    # Text for odometry wheel\n    while True:\n        brain.screen.set_cursor(4, 1)\n        brain.screen.print(Xwheel.position(DEGREES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        brain.screen.set_cursor(5, 1)\n        brain.screen.print(Zwheel.position(DEGREES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n        wait(1, SECONDS)\n        brain.screen.clear_row(4)\n        brain.screen.set_cursor(brain.screen.row(), 1)\n        brain.screen.clear_row(5)\n        brain.screen.set_cursor(brain.screen.row(), 1)\n        wait(5, MSEC)\n    # Alert for low battery\n    while True:\n        if brain.battery.capacity() < 50:\n            controller_1.rumble(\"----\")\n        wait(5, MSEC)\n\ndef ondriver_drivercontrol_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # Enables controller, restets drive settings and starts intake\n    remote_control_code_enabled = True\n    drivetrain.set_drive_velocity(100, PERCENT)\n\ndef onevent_controller_1buttonUp_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # pressing up button reverses intake\n    Belt.spin(REVERSE)\n    Intake.spin(REVERSE)\n\ndef firstCorner():\n\n    # Go Forward\n    turnTo(0)\n    backward(435)\n    turnTo(0)\n    MogoMech.set(False)\n    Starter.set(True)\n    pause(0.1)\n\n    # Collect rings on first stake and place\n    turnTo(270)\n    backward(700)\n    backward(75)\n    MogoMech.set(True)\n    Intake.spin(FORWARD)\n    Belt.spin(FORWARD)\n    pause(0.5)\n    turnTo(70)\n    turnTo(72)\n    forward(900)\n    backward(100)\n    pause(0.5)\n    turnTo(200)\n    backward(400)\n    MogoMech.set(False)\n\n    # Sweep rings out of way\n    pause(0.3)\n    forward(250)\n    turnTo(90)\n    turnTo(90)\n    backward(400)\n    Arm.set(True)\n    Intake.spin(REVERSE)\n    fullTurn()\n    \ndef secondCorner():\n\n    # Go to Second Corner\n    turnTo(90)\n    pause(0.5)\n    turnTo(90)\n    backward(400)\n    turnTo(90)\n    backward(1000)\n    turnTo(90)\n    backward(550)\n\n    # Collect rings on second stake and place\n    MogoMech.set(True)\n    pause(0.5)\n    Intake.spin(FORWARD)\n    Arm.set(False) ### QUERY - Earlier?\n    turnTo(290)\n    forward(800)\n    turnTo(155)\n    backward(200)\n    MogoMech.set(False)\n\ndef thirdCorner():\n\n    # Go to third corner\n    forward(300)\n    turnTo(180)\n    forward(1700)\n    turnTo(310)\n    backward(750)\n\n    # Collect rings on third stake and place\n    MogoMech.set(True)\n    turnTo(255)\n    Arm.set(True)\n    forward(300)\n    turnTo(0)\n    turnTo(260)\n    forward(200)\n    Arm.set(False)\n    backward(100)\n    turnTo(20)\n    backward(10)\n    MogoMech.set(False)\n\ndef onauton_autonomous_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    remote_control_code_enabled = False\n    calibrate_drivetrain()\n\n    firstCorner()\n\n    secondCorner()\n\n    thirdCorner()\n\ndef onevent_controller_1buttonUp_released_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # Releasing up button stops intake\n    Intake.stop()\n    Belt.stop()\n\ndef onevent_controller_1buttonR2_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # R2 button releases the mogo clamp\n    MogoMech.set(False)\n\ndef onevent_controller_1buttonR1_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # R1 button actuates the mogo clamp\n    MogoMech.set(True)\n\ndef onevent_controller_1buttonL2_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # L2 button runs an unjamming sequence\n    Belt.spin(REVERSE)\n    Intake.spin(REVERSE)\n    wait(2, SECONDS)\n    Belt.spin(FORWARD)\n    Intake.spin(FORWARD)\n\ndef onevent_controller_1buttonL1_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # Pressing and holding L1 spins intake (as per driver request)\n    Intake.spin(FORWARD)\n    Belt.spin(FORWARD)\n\ndef onevent_controller_1buttonX_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # X button lowers side arm\n    Arm.set(True)\n\ndef onevent_controller_1buttonA_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # A button raises side arm\n    Arm.set(False)\n\ndef onevent_controller_1buttonDown_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # Pushes forward the starter to prevent the intake flipping up during a match\n    Starter.set(False)\n\ndef onevent_controller_1buttonLeft_pressed_0():\n    global myVariable, Beltspinny, reverseintake, nostuckcodepls, stuckcodepls, message1, notused, remote_control_code_enabled, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # Pushes forward the starter to prevent the intake flipping up during a match\n    Starter.set(True)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n# system event handlers\ncontroller_1.buttonUp.pressed(onevent_controller_1buttonUp_pressed_0)\ncontroller_1.buttonUp.released(onevent_controller_1buttonUp_released_0)\ncontroller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonL2.pressed(onevent_controller_1buttonL2_pressed_0)\ncontroller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)\ncontroller_1.buttonX.pressed(onevent_controller_1buttonX_pressed_0)\ncontroller_1.buttonA.pressed(onevent_controller_1buttonA_pressed_0)\ncontroller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\ncontroller_1.buttonLeft.pressed(onevent_controller_1buttonLeft_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[1,2,3,4,10],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"325","unit":"mm","wheelbase":"250","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[5,21],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"inTAKE","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1,2],"name":"Xwheel","customName":true,"deviceType":"Encoder","deviceClass":"encoder","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7,8],"name":"Zwheel","customName":true,"deviceType":"Encoder","deviceClass":"encoder","setting":{"id":"partner"},"triportSourcePort":22},{"port":[6,8],"name":"Belt","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[6],"name":"MogoMech","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"Arm","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3],"name":"Starter","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}