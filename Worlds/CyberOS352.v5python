{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nexpander_4 = Triport(Ports.PORT4)\nL1 = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nL2 = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nL3 = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nR1 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, True)\nR2 = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nR3 = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)\ncontroller_1 = Controller(PRIMARY)\nMogo = DigitalOut(brain.three_wire_port.h)\nBelt = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nLoader = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nlifter = DigitalOut(expander_4.a)\nArm = DigitalOut(expander_4.c)\nWallStakeMotor = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nWallStakePos = PotentiometerV2(brain.three_wire_port.a)\nAutonSelector = PotentiometerV2(brain.three_wire_port.b)\nColourSensor = Optical(Ports.PORT19)\nDistanceSensor = Distance(Ports.PORT17)\nInertialSensor = Inertial(Ports.PORT18)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nSpeedLeft = 0\nSpeedRight = 0\nSpeedMultiplier = 1\nWheelDiameter = 82.55\nWheelBaseWidth = 254\nPi = 3.1415\nkp = 0.5\nki = 0.01\nkd = 0.1\nLeftMotors = [L1,L2,L3]\nRightMotors = [R1,R2,R3]\nDriveMotors = LeftMotors + RightMotors\nRemoteControl = True\nSelectedAuton = 1\n\n\ndef pause(sec):\n    wait(sec,SECONDS)\n\ndef PIDControl(target, isTurning=False):\n    error = 0\n    integral = 0\n    derivative = 0\n    lastError = 0\n\n    for motor in DriveMotors:\n        motor.reset_position()\n\n    while True:\n        if isTurning:\n            current = InertialSensor.rotation() \n        else:\n            leftPos = sum([m.position(DEGREES) for m in [L1, L2, L3]]) / 3\n            rightPos = sum([m.position(DEGREES) for m in [R1, R2, R3]]) / 3\n            current = (abs(leftPos) + abs(rightPos)) / 2  \n\n        error = target - current\n\n        if isTurning:  \n            if error > 180:\n                error -= 360\n            elif error < -180:\n                error += 360\n\n        integral += error\n        derivative = error - lastError\n\n        power = (kp * error) + (ki * integral) + (kd * derivative)\n        power = max(min(power, 100), -100)\n        power *= SpeedMultiplier\n        if isTurning:\n            for motor in LeftMotors:\n                motor.spin(FORWARD, -power, PERCENT)\n            for motor in RightMotors:\n                motor.spin(FORWARD, power, PERCENT)\n        else:\n            for motor in DriveMotors:\n                motor.spin(FORWARD, power, PERCENT)\n\n        if abs(error) < 5:\n            break\n\n        lastError = error\n        wait(20, MSEC)\n\n    for motor in DriveMotors:\n        motor.stop()\n\n\ndef forward(dist):\n    degrees = (dist / (WheelDiameter * 3.1415)) * 360\n    PIDControl(degrees)\n\n\ndef backward(dist):\n    degrees = (dist / (WheelDiameter * 3.1415)) * 360\n    PIDControl(degrees)\n\n\ndef turnTo(target):\n    PIDControl(target, isTurning=True)\n\ndef RedLeft():\n    brain.screen.set_cursor(7,6)\n    brain.screen.clear_row(7)\n    brain.screen.print('Red Left starting')\n    forward(50)\n    turnTo(90)\n\ndef RedRight():\n    brain.screen.set_cursor(7,6)\n    brain.screen.clear_row(7)\n    brain.screen.print('Red Right starting')\n    \ndef BlueLeft():\n    brain.screen.set_cursor(7,6)\n    brain.screen.clear_row(7)\n    brain.screen.print('Blue Left starting')\n\ndef BlueRight():\n    brain.screen.set_cursor(7,6)\n    brain.screen.clear_row(7)\n    brain.screen.print('Blue Right starting')\n\ndef Autonomous():\n    global RemoteControl, SpeedMultiplier\n    RemoteControl = False\n    SpeedMultiplier = 0.6\n    if SelectedAuton == 1:\n        RedLeft()\n    elif SelectedAuton == 2:\n        RedRight()\n    elif SelectedAuton == 3:\n        BlueLeft()\n    else:\n        BlueRight()\n\ndef Driver():\n    global RemoteControl\n    RemoteControl = True\n\ndef StartProcedure():\n    global SpeedLeft, SpeedRight\n    brain.screen.clear_screen()\n    brain.screen.print(\"T-VEX\")\n    brain.screen.next_row()\n    brain.screen.print(\"CyberSquad_78116A\")\n    brain.screen.next_row()\n    brain.screen.print(\"A Bajaj & Collis production\")\n    Belt.set_velocity(60, PERCENT)\n    Belt.set_max_torque(100,PERCENT)\n    Loader.set_velocity(100, PERCENT)\n    WallStakeMotor.set_velocity(100, PERCENT)\n    WallStakeMotor.set_stopping(HOLD)\n    InertialCalibration()\n    while True:\n        AutonChoosing()\n        if RemoteControl:\n            SpeedLeft = (controller_1.axis3.position()) / 8.3\n            SpeedRight = (controller_1.axis2.position()) / 8.3\n            L1.spin(FORWARD, SpeedLeft, VOLT)\n            L2.spin(FORWARD, SpeedLeft, VOLT)\n            L3.spin(FORWARD, SpeedLeft, VOLT)\n            R1.spin(FORWARD, SpeedRight, VOLT)\n            R2.spin(FORWARD, SpeedRight, VOLT)\n            R3.spin(FORWARD, SpeedRight, VOLT)\n        wait(5,MSEC)\n    \ndef clampMogo():\n    Mogo.set(True)\n\ndef unclampMogo():\n    Mogo.set(False)\n\ndef startIntake():\n    Belt.spin(FORWARD)\n    Loader.spin(FORWARD)\n\ndef reverseIntake():\n    Belt.spin(REVERSE)\n    Loader.spin(REVERSE)\n\ndef stopIntake():\n    Belt.stop()\n    Loader.stop()\n\ndef LiftLifter():\n    lifter.set(True)\n\ndef LowerLifter():\n    lifter.set(False)\n\ndef LiftArm():\n    Arm.set(True)\n\ndef LowerArm():\n    Arm.set(False)\n\ndef WallStakeUp():\n    WallStakeMotor.spin(FORWARD)\n\ndef WallStakeDown():\n    WallStakeMotor.spin(REVERSE)\n\ndef WallStakeStop():\n    WallStakeMotor.stop()\n\ndef WallStakeLow():\n    while WallStakePos.angle(PERCENT) < 60:\n        WallStakeDown()\n    WallStakeStop()\n\ndef WallStakeHigh():\n    while WallStakePos.angle(PERCENT) != 55:\n        if WallStakePos.angle(PERCENT) < 53:\n            WallStakeDown()\n        else:\n            WallStakeUp()\n    WallStakeStop()\n\ndef AutonChoosing():\n    global SelectedAuton\n    value = AutonSelector.angle(PERCENT)\n    LastAuton = SelectedAuton\n    if value <= 25:\n        SelectedAuton = 1\n    elif value <= 50:\n        SelectedAuton = 2\n    elif value <= 75:\n        SelectedAuton = 3\n    else:\n        SelectedAuton = 4\n    if SelectedAuton != LastAuton:\n        if SelectedAuton == 1:\n            brain.screen.set_cursor(6,6)\n            brain.screen.clear_row(6)\n            brain.screen.print('Red Left')\n        elif SelectedAuton == 2:\n            brain.screen.set_cursor(6,6)\n            brain.screen.clear_row(6)\n            brain.screen.print('Red Right')\n        elif SelectedAuton == 3:\n            brain.screen.set_cursor(6,6)\n            brain.screen.clear_row(6)\n            brain.screen.print('Blue Left')\n        else:\n            brain.screen.set_cursor(6,6)\n            brain.screen.clear_row(6)\n            brain.screen.print('Blue Right')\n\ndef ColourSelector():\n    ColourSensor.set_light(LedStateType.ON)\n    while True:\n        if ColourSensor.color() == Color.BLUE:\n            Belt.set_velocity(30,PERCENT)\n            brain.screen.set_fill_color(Color.RED)\n            pause(0.25)\n            while DistanceSensor.object_distance(MM) >= 10:\n                wait(5,MSEC)\n            Belt.spin_for(FORWARD, 85,DEGREES)\n            Belt.spin_for(REVERSE,50,DEGREES)\n            Belt.set_velocity(60,PERCENT)\n            Belt.spin(FORWARD)\n            brain.screen.set_fill_color(Color.GREEN)\n    ColourSensor.set_light(LedStateType.OFF)\n\ndef InertialCalibration():\n    InertialSensor.calibrate()\n    while InertialSensor.is_calibrating():\n        wait(100, MSEC)\n\ndef RunAuton():\n    autonTask = Thread(Autonomous)\n    while(competition.is_autonomous() and competition.is_enabled()):\n        wait(10, MSEC)\n    autonTask.stop()\n\ndef RunDriver():\n    driverTask = Thread(Driver)\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        wait( 10, MSEC )\n    driverTask.stop()\n\ncompetition = Competition( RunDriver, RunAuton )\n\ncontroller_1.buttonR1.pressed(clampMogo)\ncontroller_1.buttonR2.pressed(unclampMogo)\ncontroller_1.buttonL1.pressed(startIntake)\ncontroller_1.buttonL2.pressed(reverseIntake)\ncontroller_1.buttonL2.released(stopIntake)\ncontroller_1.buttonX.released(LiftLifter)\ncontroller_1.buttonY.released(LowerLifter)\ncontroller_1.buttonA.released(LiftArm)\ncontroller_1.buttonB.released(LowerArm)\ncontroller_1.buttonUp.pressed(WallStakeUp)\ncontroller_1.buttonDown.pressed(WallStakeDown)\ncontroller_1.buttonUp.released(WallStakeStop)\ncontroller_1.buttonDown.released(WallStakeStop)\ncontroller_1.buttonLeft.pressed(WallStakeLow)\ncontroller_1.buttonRight.pressed(WallStakeHigh)\nwait(15,MSEC)\n\nsimulRun2 = Thread(ColourSelector)\nStartProcedure()","textLanguage":"python","robotConfig":[{"port":[1],"name":"L1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"L2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"L3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[7],"name":"R1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"R2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[9],"name":"R3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"Mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"Belt","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"Loader","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[4],"name":"expander_4","customName":false,"deviceType":"Expander","deviceClass":"triport","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"lifter","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":4},{"port":[3],"name":"Arm","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":4},{"port":[5],"name":"WallStakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"WallStakePos","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"AutonSelector","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{"id":"partner"},"triportSourcePort":22},{"port":[19],"name":"ColourSensor","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"},"triportSourcePort":22},{"port":[17],"name":"DistanceSensor","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[18],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}